// Code generated by MockGen. DO NOT EDIT.
// Source: jsonx/jsonx.go

// Package jsonx is a generated GoMock package.
package jsonx

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStandardClient is a mock of StandardClient interface.
type MockStandardClient struct {
	ctrl     *gomock.Controller
	recorder *MockStandardClientMockRecorder
}

// MockStandardClientMockRecorder is the mock recorder for MockStandardClient.
type MockStandardClientMockRecorder struct {
	mock *MockStandardClient
}

// NewMockStandardClient creates a new mock instance.
func NewMockStandardClient(ctrl *gomock.Controller) *MockStandardClient {
	mock := &MockStandardClient{ctrl: ctrl}
	mock.recorder = &MockStandardClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStandardClient) EXPECT() *MockStandardClientMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockStandardClient) Decode(reader io.Reader, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", reader, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockStandardClientMockRecorder) Decode(reader, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockStandardClient)(nil).Decode), reader, v)
}

// Encode mocks base method.
func (m *MockStandardClient) Encode(writer io.Writer, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", writer, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Encode indicates an expected call of Encode.
func (mr *MockStandardClientMockRecorder) Encode(writer, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockStandardClient)(nil).Encode), writer, v)
}

// Marshal mocks base method.
func (m *MockStandardClient) Marshal(v interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", v)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal.
func (mr *MockStandardClientMockRecorder) Marshal(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockStandardClient)(nil).Marshal), v)
}

// Unmarshal mocks base method.
func (m *MockStandardClient) Unmarshal(data []byte, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", data, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockStandardClientMockRecorder) Unmarshal(data, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockStandardClient)(nil).Unmarshal), data, v)
}
